# Nginx configuration for Clearhead Actions Vocabulary
# Place in /etc/nginx/sites-available/ and symlink to sites-enabled/

server {
    listen 80;
    listen [::]:80;
    server_name vocab.clearhead.io;

    # Redirect HTTP to HTTPS
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name vocab.clearhead.io;

    # SSL configuration (adjust paths as needed)
    ssl_certificate /etc/letsencrypt/live/vocab.clearhead.io/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/vocab.clearhead.io/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # Document root
    root /var/www/vocab.clearhead.io;
    index index.html;

    # Security headers
    add_header X-Frame-Options "DENY" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

    # CORS headers for API access
    add_header Access-Control-Allow-Origin "*" always;
    add_header Access-Control-Allow-Methods "GET, OPTIONS" always;
    add_header Access-Control-Allow-Headers "Accept, Content-Type" always;

    # Handle preflight requests
    location / {
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin '*';
            add_header Access-Control-Allow-Methods 'GET, OPTIONS';
            add_header Access-Control-Allow-Headers 'Accept, Content-Type';
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 200;
        }
    }

    # Content negotiation for /actions/ endpoint
    location = /actions {
        return 301 /actions/;
    }

    location = /actions/ {
        # Turtle format
        if ($http_accept ~* "text/turtle") {
            rewrite ^ /actions/vocabulary.ttl last;
        }
        
        # RDF/XML format
        if ($http_accept ~* "application/rdf\+xml") {
            rewrite ^ /actions/vocabulary.rdf last;
        }
        
        # JSON Schema format
        if ($http_accept ~* "application/.*json") {
            rewrite ^ /actions/schemas/actions-combined.schema.json last;
        }
        
        # JSON-LD format
        if ($http_accept ~* "application/ld\+json") {
            rewrite ^ /actions/vocabulary.jsonld last;
        }
        
        # Default to HTML for browsers
        try_files /actions/index.html =404;
    }

    # Serve vocabulary files with proper MIME types
    location ~ \.ttl$ {
        add_header Content-Type "text/turtle; charset=utf-8";
        expires 1h;
        add_header Cache-Control "public, max-age=3600";
    }

    location ~ \.rdf$ {
        add_header Content-Type "application/rdf+xml; charset=utf-8"; 
        expires 1h;
        add_header Cache-Control "public, max-age=3600";
    }

    location ~ \.schema\.json$ {
        add_header Content-Type "application/schema+json; charset=utf-8";
        expires 1h;
        add_header Cache-Control "public, max-age=3600";
    }

    location ~ \.jsonld$ {
        add_header Content-Type "application/ld+json; charset=utf-8";
        expires 1h; 
        add_header Cache-Control "public, max-age=3600";
    }

    # Documentation files (no cache)
    location ~ \.html$ {
        add_header Cache-Control "no-cache, must-revalidate";
        expires epoch;
    }

    # Static assets
    location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;
    }

    # Redirect root to actions vocabulary
    location = / {
        return 302 /actions/;
    }

    # Well-known URIs for discovery
    location /.well-known/ {
        add_header Content-Type "application/json; charset=utf-8";
        expires 1h;
        add_header Cache-Control "public, max-age=3600";
    }

    # Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied expired no-cache no-store private must-revalidate max-age=0 auth;
    gzip_types
        application/atom+xml
        application/geo+json
        application/javascript
        application/x-javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rdf+xml
        application/rss+xml
        application/schema+json
        application/vnd.ms-fontobject
        application/wasm
        application/x-web-app-manifest+json
        application/xhtml+xml
        application/xml
        font/eot
        font/otf
        font/ttf
        image/bmp
        image/svg+xml
        text/cache-manifest
        text/calendar
        text/css
        text/javascript
        text/markdown
        text/plain
        text/turtle
        text/vcard
        text/vnd.rim.location.xloc
        text/vtt
        text/x-component
        text/x-cross-domain-policy;

    # Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;

    # Logging
    access_log /var/log/nginx/vocab.clearhead.io.access.log;
    error_log /var/log/nginx/vocab.clearhead.io.error.log;
}