<?xml version="1.0"?>
<rdf:RDF xmlns="https://vocab.clearhead.io/actions/workflow#"
     xml:base="https://vocab.clearhead.io/actions/workflow"
     xmlns:owl="http://www.w3.org/2002/07/owl#"
     xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
     xmlns:xsd="http://www.w3.org/2001/XMLSchema#"
     xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
     xmlns:bfo="http://purl.obolibrary.org/obo/BFO_"
     xmlns:cco="https://www.commoncoreontologies.org/"
     xmlns:actions="https://vocab.clearhead.io/actions/v3#"
     xmlns:schema="http://schema.org/"
     xmlns:skos="http://www.w3.org/2004/02/skos/core#"
     xmlns:dc="http://purl.org/dc/terms/">

    <owl:Ontology rdf:about="https://vocab.clearhead.io/actions/workflow">
        <owl:versionIRI rdf:resource="https://vocab.clearhead.io/actions/workflow/3.1.0"/>
        <owl:imports rdf:resource="https://vocab.clearhead.io/actions/v3"/>

        <dc:creator>Claude (AI Assistant) in collaboration with Darrion Burgess</dc:creator>
        <dc:created rdf:datatype="http://www.w3.org/2001/XMLSchema#date">2025-10-26</dc:created>
        <dc:title>Actions Vocabulary - Workflow &amp; Dependency Extension</dc:title>
        <rdfs:label>Actions Workflow Extension v3.1</rdfs:label>
        <rdfs:comment>Extension to Actions Vocabulary v3 that adds dependency modeling and workflow patterns. Provides relations for sequential constraints (dependsOn), runtime blocking (blockedBy), and workflow patterns (parallel execution, milestones).</rdfs:comment>
        <owl:versionInfo>3.1.0</owl:versionInfo>
        <rdfs:seeAlso rdf:resource="https://vocab.clearhead.io/docs/PHASE2_DESIGN.md#extension-2-dependency-workflow"/>
    </owl:Ontology>



    <!--
    ///////////////////////////////////////////////////////////////////////////////////////
    //
    // DESIGN RATIONALE
    //
    // Why Two Levels of Dependencies?
    //
    // 1. PLAN LEVEL (Continuant → Continuant):
    //    - dependsOn, cannotStartUntil: Relations between action PLANS
    //    - Prescriptive information about intended execution order
    //    - Persists as part of plan definition
    //    - BFO: Relations between continuants (information entities)
    //
    // 2. PROCESS LEVEL (Occurrent → Occurrent):
    //    - blockedBy: Relations between action PROCESSES
    //    - Descriptive information about actual runtime state
    //    - Changes during execution (blocker completes → unblock)
    //    - BFO: Relations between occurrents (processes/events)
    //
    // This separation aligns with BFO's continuant/occurrent distinction and allows:
    // - Plan A depends on Plan B (information about order)
    // - Process A₁ blocked by Process B₁ (actual runtime state)
    // - Plan reuse: Same plan executed multiple times with different blockages
    //
    // 3. ALTERNATIVES CONSIDERED:
    //    - Single dependency property: Rejected - conflates information and execution
    //    - Reified dependencies: Deferred - can add later if n-ary relations needed
    //    - CCO precedence only: Rejected - too general, need domain-specific semantics
    //
    ///////////////////////////////////////////////////////////////////////////////////////
    -->



    <!--
    ///////////////////////////////////////////////////////////////////////////////////////
    //
    // Plan-Level Dependency Relations (Prescriptive)
    //
    ///////////////////////////////////////////////////////////////////////////////////////
    -->

    <!-- https://vocab.clearhead.io/actions/workflow#dependsOn -->

    <owl:ObjectProperty rdf:about="https://vocab.clearhead.io/actions/workflow#dependsOn">
        <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#TransitiveProperty"/>
        <rdfs:domain rdf:resource="https://vocab.clearhead.io/actions/v3#ActionPlan"/>
        <rdfs:range rdf:resource="https://vocab.clearhead.io/actions/v3#ActionPlan"/>
        <rdfs:label xml:lang="en">depends on</rdfs:label>
        <skos:definition xml:lang="en">Indicates that this action plan should not begin execution until the target action plan has been completed.</skos:definition>
        <rdfs:comment xml:lang="en">DESIGN NOTE: General dependency relation for plans (continuants).

SEMANTICS:
- Plan A dependsOn Plan B → A should start after B completes
- Transitive: A dependsOn B, B dependsOn C ⇒ A dependsOn C
- NOT functional: Action can depend on multiple others

LEVEL: Prescriptive information (what SHOULD happen)
- Stored in plan definition
- Doesn't change during execution
- May be violated in practice (actual execution differs)

USE CASES:
- Sequential tasks in a project
- Prerequisites for starting work
- Planning phase: Define logical order

CONTRAST WITH blockedBy:
- dependsOn: Plan (information) relates to plan
- blockedBy: Process (execution) relates to process
- dependsOn is prescriptive, blockedBy is descriptive

GTD: "Can't start Plan B until Plan A is complete"
AGILE: User Story 2 depends on User Story 1</rdfs:comment>
        <skos:example>:implement_feature_plan dependsOn :design_feature_plan .</skos:example>
    </owl:ObjectProperty>



    <!-- https://vocab.clearhead.io/actions/workflow#cannotStartUntil -->

    <owl:ObjectProperty rdf:about="https://vocab.clearhead.io/actions/workflow#cannotStartUntil">
        <rdfs:domain rdf:resource="https://vocab.clearhead.io/actions/v3#ActionPlan"/>
        <rdfs:range rdf:resource="https://vocab.clearhead.io/actions/v3#ActionPlan"/>
        <owl:inverseOf rdf:resource="https://vocab.clearhead.io/actions/workflow#mustCompleteBefore"/>
        <rdfs:label xml:lang="en">cannot start until</rdfs:label>
        <skos:definition xml:lang="en">Hard constraint: this action plan cannot begin until the target plan completes.</skos:definition>
        <rdfs:comment xml:lang="en">DESIGN NOTE: Stronger than dependsOn - CANNOT vs SHOULD NOT.

SEMANTICS:
- Mandatory constraint (hard dependency)
- Violation would be invalid, not just suboptimal
- Inverse of mustCompleteBefore (symmetrical relationship)

USE CASES:
- Physical dependencies: Can't paint before priming
- Logical prerequisites: Can't deploy before testing passes
- Approval gates: Can't proceed without sign-off

CONTRAST WITH dependsOn:
- dependsOn: Soft constraint (recommended order)
- cannotStartUntil: Hard constraint (required order)
- dependsOn can be violated, cannotStartUntil cannot

VALIDATION: Reasoner can detect violations
- If Process A starts while Process B (target of cannotStartUntil) is not Completed
- → Inconsistency or constraint violation warning</rdfs:comment>
        <skos:example>:deploy_plan cannotStartUntil :testing_plan .</skos:example>
    </owl:ObjectProperty>



    <!-- https://vocab.clearhead.io/actions/workflow#mustCompleteBefore -->

    <owl:ObjectProperty rdf:about="https://vocab.clearhead.io/actions/workflow#mustCompleteBefore">
        <rdfs:domain rdf:resource="https://vocab.clearhead.io/actions/v3#ActionPlan"/>
        <rdfs:range rdf:resource="https://vocab.clearhead.io/actions/v3#ActionPlan"/>
        <owl:inverseOf rdf:resource="https://vocab.clearhead.io/actions/workflow#cannotStartUntil"/>
        <rdfs:label xml:lang="en">must complete before</rdfs:label>
        <skos:definition xml:lang="en">Hard constraint: this action must finish before the target action can start.</skos:definition>
        <rdfs:comment xml:lang="en">DESIGN NOTE: Inverse of cannotStartUntil (same relationship, different direction).

USAGE:
- :planA mustCompleteBefore :planB
- Equivalent to: :planB cannotStartUntil :planA

QUERY PATTERN:
"Find all plans that must complete before Plan X"
  SELECT ?blocking_plan WHERE {
    ?blocking_plan :mustCompleteBefore :planX .
  }

"Find all plans that cannot start until Plan X completes"
  SELECT ?blocked_plan WHERE {
    ?blocked_plan :cannotStartUntil :planX .
  }
  # Same as: :planX :mustCompleteBefore ?blocked_plan

REASONING: OWL reasoner automatically infers inverse
- Assert: A mustCompleteBefore B
- Infer: B cannotStartUntil A</rdfs:comment>
    </owl:ObjectProperty>



    <!-- https://vocab.clearhead.io/actions/workflow#preferredAfter -->

    <owl:ObjectProperty rdf:about="https://vocab.clearhead.io/actions/workflow#preferredAfter">
        <rdfs:domain rdf:resource="https://vocab.clearhead.io/actions/v3#ActionPlan"/>
        <rdfs:range rdf:resource="https://vocab.clearhead.io/actions/v3#ActionPlan"/>
        <rdfs:label xml:lang="en">preferred after</rdfs:label>
        <skos:definition xml:lang="en">Soft constraint: this action is preferably done after the target, but not required.</skos:definition>
        <rdfs:comment xml:lang="en">DESIGN NOTE: Weakest constraint - optimization hint, not requirement.

SEMANTICS:
- Recommendation, not mandate
- Violating doesn't cause error
- Used for scheduling optimization, not blocking

USE CASES:
- "Better to do email processing after meetings"
- "Prefer morning for high-energy tasks"
- "Nice to have design review before implementation, but not blocking"

STRENGTH HIERARCHY:
1. cannotStartUntil (hardest) - MUST respect
2. dependsOn (medium) - SHOULD respect
3. preferredAfter (softest) - MAY respect for optimization

SCHEDULING ALGORITHM:
- Honor cannotStartUntil (required)
- Try to honor dependsOn (recommended)
- Optimize for preferredAfter if possible (nice-to-have)</rdfs:comment>
        <skos:example>:email_processing_plan preferredAfter :morning_standup_plan .</skos:example>
    </owl:ObjectProperty>



    <!--
    ///////////////////////////////////////////////////////////////////////////////////////
    //
    // Process-Level Blocking Relations (Descriptive)
    //
    ///////////////////////////////////////////////////////////////////////////////////////
    -->

    <!-- https://vocab.clearhead.io/actions/workflow#blockedBy -->

    <owl:ObjectProperty rdf:about="https://vocab.clearhead.io/actions/workflow#blockedBy">
        <rdfs:domain rdf:resource="https://vocab.clearhead.io/actions/v3#ActionProcess"/>
        <rdfs:range rdf:resource="http://purl.obolibrary.org/obo/BFO_0000003"/>
        <rdfs:label xml:lang="en">blocked by</rdfs:label>
        <skos:definition xml:lang="en">Indicates that this action process cannot continue until the specified occurrent completes.</skos:definition>
        <rdfs:comment xml:lang="en">DESIGN NOTE: Runtime blocking relationship between processes (occurrents).

SEMANTICS:
- Process A blockedBy Process B → A waits for B to complete
- Range: ANY occurrent (not just ActionProcess)
  - Can be blocked by external event (delivery, weather, approval process)
  - More general than plan-level dependencies

LEVEL: Descriptive (what IS happening)
- Actual runtime state
- Changes during execution
- Process starts Blocked, becomes NotStarted when blocker completes

AUTOMATED STATE MANAGEMENT:
Rule: If all blockers are Completed → change state from Blocked to NotStarted

USE CASES:
- GTD "Waiting For": Blocked by external agent's action
- Dependency enforcement: Process waits for dependency to complete
- External events: Blocked by approval, delivery, weather

CONTRAST WITH dependsOn:
- dependsOn: Plan → Plan (prescriptive, permanent)
- blockedBy: Process → Occurrent (descriptive, temporary)

EXAMPLE:
  :review_process a actions:ActionProcess ;
    actions:hasState actions:Blocked ;
    :blockedBy :client_approval_process .

  # When client_approval_process completes:
  UPDATE { :review_process actions:hasState actions:NotStarted }
  DELETE { :review_process actions:hasState actions:Blocked }</rdfs:comment>
        <skos:example>:implementation_process blockedBy :design_approval_process .</skos:example>
    </owl:ObjectProperty>



    <!--
    ///////////////////////////////////////////////////////////////////////////////////////
    //
    // Workflow Pattern Support
    //
    ///////////////////////////////////////////////////////////////////////////////////////
    -->

    <!-- https://vocab.clearhead.io/actions/workflow#canRunInParallel -->

    <owl:ObjectProperty rdf:about="https://vocab.clearhead.io/actions/workflow#canRunInParallel">
        <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#SymmetricProperty"/>
        <rdfs:domain rdf:resource="https://vocab.clearhead.io/actions/v3#ActionPlan"/>
        <rdfs:range rdf:resource="https://vocab.clearhead.io/actions/v3#ActionPlan"/>
        <rdfs:label xml:lang="en">can run in parallel</rdfs:label>
        <skos:definition xml:lang="en">Indicates these actions have no ordering constraints and can be executed simultaneously.</skos:definition>
        <rdfs:comment xml:lang="en">DESIGN NOTE: Explicit declaration that actions are independent.

SEMANTICS:
- Symmetric: A canRunInParallel B ⇒ B canRunInParallel A
- Indicates NO dependencies exist between actions
- Optimization hint for parallel execution

USE CASES:
- Task scheduling: "These can be done at the same time"
- Resource allocation: Assign to different team members
- Time estimation: Parallel tasks don't add to sequential duration

INFERENCE:
- Absence of dependsOn/cannotStartUntil doesn't mean parallelizable
  (might just not be specified yet)
- canRunInParallel makes independence explicit

AGILE: Sprint planning
- Identify stories that can be worked in parallel
- Assign to different developers
- Maximize throughput</rdfs:comment>
        <skos:example>:design_ui_plan canRunInParallel :write_backend_tests_plan .</skos:example>
    </owl:ObjectProperty>



    <!--
    ///////////////////////////////////////////////////////////////////////////////////////
    //
    // Milestone Pattern
    //
    ///////////////////////////////////////////////////////////////////////////////////////
    -->

    <!-- https://vocab.clearhead.io/actions/workflow#Milestone -->

    <owl:Class rdf:about="https://vocab.clearhead.io/actions/workflow#Milestone">
        <rdfs:subClassOf rdf:resource="https://vocab.clearhead.io/actions/v3#RootActionPlan"/>
        <rdfs:label xml:lang="en">Milestone</rdfs:label>
        <skos:definition xml:lang="en">A significant checkpoint or goal in a project, often used as a dependency target for multiple actions.</skos:definition>
        <rdfs:comment xml:lang="en">DESIGN NOTE: Milestones as special ActionPlans.

CHARACTERISTICS:
- Typically don't prescribe processes (no execution)
- Represent completion of a set of actions
- Used as dependency targets (many actions depend on milestone)
- Mark significant progress points

PROJECT MANAGEMENT PATTERN:
  :sprint1_milestone a :Milestone ;
    schema:name "Sprint 1 Complete" .

  # Multiple actions depend on milestone
  :sprint2_story1 dependsOn :sprint1_milestone .
  :sprint2_story2 dependsOn :sprint1_milestone .
  :sprint2_story3 dependsOn :sprint1_milestone .

  # Milestone is complete when all constituent actions complete
  :sprint1_milestone bfo:has_part :sprint1_story1, :sprint1_story2, :sprint1_story3 .

COMPLETION LOGIC:
- Milestone is achieved when all component actions (has_part) are Completed
- Can be computed via SPARQL query
- Triggers unblocking of dependent actions

AGILE: Sprint boundaries, release milestones
GTD: Project completion checkpoints</rdfs:comment>
        <skos:example>:mvp_release_milestone a :Milestone ; schema:name "MVP Released to Production" .</skos:example>
    </owl:Class>



    <!--
    ///////////////////////////////////////////////////////////////////////////////////////
    //
    // Example Instances
    //
    ///////////////////////////////////////////////////////////////////////////////////////
    -->

    <!-- Example 1: Simple Sequential Dependency -->

    <owl:NamedIndividual rdf:about="https://vocab.clearhead.io/actions/workflow#design_plan">
        <rdf:type rdf:resource="https://vocab.clearhead.io/actions/v3#RootActionPlan"/>
        <schema:name>Design feature architecture</schema:name>
        <actions:hasPriority rdf:datatype="http://www.w3.org/2001/XMLSchema#positiveInteger">1</actions:hasPriority>
    </owl:NamedIndividual>

    <owl:NamedIndividual rdf:about="https://vocab.clearhead.io/actions/workflow#implement_plan">
        <rdf:type rdf:resource="https://vocab.clearhead.io/actions/v3#RootActionPlan"/>
        <schema:name>Implement feature</schema:name>
        <dependsOn rdf:resource="https://vocab.clearhead.io/actions/workflow#design_plan"/>
        <rdfs:comment>Cannot implement until design is complete</rdfs:comment>
    </owl:NamedIndividual>



    <!-- Example 2: Blocked Process (GTD "Waiting For" Pattern) -->

    <owl:NamedIndividual rdf:about="https://vocab.clearhead.io/actions/workflow#followup_plan">
        <rdf:type rdf:resource="https://vocab.clearhead.io/actions/v3#RootActionPlan"/>
        <schema:name>Follow up on proposal</schema:name>
        <actions:prescribes rdf:resource="https://vocab.clearhead.io/actions/workflow#followup_process"/>
    </owl:NamedIndividual>

    <owl:NamedIndividual rdf:about="https://vocab.clearhead.io/actions/workflow#followup_process">
        <rdf:type rdf:resource="https://vocab.clearhead.io/actions/v3#ActionProcess"/>
        <actions:hasState rdf:resource="https://vocab.clearhead.io/actions/v3#Blocked"/>
        <blockedBy rdf:resource="https://vocab.clearhead.io/actions/workflow#client_review_process"/>
        <rdfs:comment>GTD Waiting For: Blocked waiting for client to review proposal</rdfs:comment>
    </owl:NamedIndividual>

    <owl:NamedIndividual rdf:about="https://vocab.clearhead.io/actions/workflow#client_review_process">
        <rdf:type rdf:resource="http://purl.obolibrary.org/obo/BFO_0000015"/>
        <rdfs:label>Client proposal review process</rdfs:label>
        <rdfs:comment>External process (not an ActionProcess) - client's review activity</rdfs:comment>
    </owl:NamedIndividual>



    <!-- Example 3: Milestone Pattern -->

    <owl:NamedIndividual rdf:about="https://vocab.clearhead.io/actions/workflow#mvp_milestone">
        <rdf:type rdf:resource="https://vocab.clearhead.io/actions/workflow#Milestone"/>
        <schema:name>MVP Release</schema:name>
        <bfo:BFO_0000051 rdf:resource="https://vocab.clearhead.io/actions/workflow#auth_story"/>
        <bfo:BFO_0000051 rdf:resource="https://vocab.clearhead.io/actions/workflow#dashboard_story"/>
        <bfo:BFO_0000051 rdf:resource="https://vocab.clearhead.io/actions/workflow#settings_story"/>
        <rdfs:comment>Milestone achieved when all three stories are complete</rdfs:comment>
    </owl:NamedIndividual>

    <owl:NamedIndividual rdf:about="https://vocab.clearhead.io/actions/workflow#auth_story">
        <rdf:type rdf:resource="https://vocab.clearhead.io/actions/v3#RootActionPlan"/>
        <schema:name>User authentication</schema:name>
    </owl:NamedIndividual>

    <owl:NamedIndividual rdf:about="https://vocab.clearhead.io/actions/workflow#dashboard_story">
        <rdf:type rdf:resource="https://vocab.clearhead.io/actions/v3#RootActionPlan"/>
        <schema:name>Dashboard view</schema:name>
    </owl:NamedIndividual>

    <owl:NamedIndividual rdf:about="https://vocab.clearhead.io/actions/workflow#settings_story">
        <rdf:type rdf:resource="https://vocab.clearhead.io/actions/v3#RootActionPlan"/>
        <schema:name>User settings</schema:name>
    </owl:NamedIndividual>

    <!-- Next sprint depends on milestone -->
    <owl:NamedIndividual rdf:about="https://vocab.clearhead.io/actions/workflow#analytics_story">
        <rdf:type rdf:resource="https://vocab.clearhead.io/actions/v3#RootActionPlan"/>
        <schema:name>Analytics integration</schema:name>
        <cannotStartUntil rdf:resource="https://vocab.clearhead.io/actions/workflow#mvp_milestone"/>
        <rdfs:comment>Cannot start analytics until MVP is released</rdfs:comment>
    </owl:NamedIndividual>



    <!-- Example 4: Parallel Execution -->

    <owl:NamedIndividual rdf:about="https://vocab.clearhead.io/actions/workflow#frontend_tests_plan">
        <rdf:type rdf:resource="https://vocab.clearhead.io/actions/v3#RootActionPlan"/>
        <schema:name>Write frontend tests</schema:name>
    </owl:NamedIndividual>

    <owl:NamedIndividual rdf:about="https://vocab.clearhead.io/actions/workflow#backend_tests_plan">
        <rdf:type rdf:resource="https://vocab.clearhead.io/actions/v3#RootActionPlan"/>
        <schema:name>Write backend tests</schema:name>
        <canRunInParallel rdf:resource="https://vocab.clearhead.io/actions/workflow#frontend_tests_plan"/>
        <rdfs:comment>These test suites are independent and can be written simultaneously</rdfs:comment>
    </owl:NamedIndividual>

</rdf:RDF>
